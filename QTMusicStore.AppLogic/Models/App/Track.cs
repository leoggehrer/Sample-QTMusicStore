//@GeneratedCode
namespace QTMusicStore.AppLogic.Models.App
{
    ///
    /// Generated by the generator
    ///
    public partial class Track
    {
        ///
        /// Generated by the generator
        ///
        static Track()
        {
            ClassConstructing();
            ClassConstructed();
        }
        static partial void ClassConstructing();
        static partial void ClassConstructed();
        
        ///
        /// Generated by the generator
        ///
        public Track()
        {
            Constructing();
            
            Constructed();
        }
        partial void Constructing();
        partial void Constructed();
        
        new internal Entities.App.Track Source
        {
            get => (Entities.App.Track)(_source ??= new Entities.App.Track());
            set => _source = value;
        }
        
        public IdType AlbumId
        {
            get => Source.AlbumId;
            set => Source.AlbumId = value;
        }
        
        public IdType GenerId
        {
            get => Source.GenreId;
            set => Source.GenreId = value;
        }
        
        public System.String Title
        {
            get => Source.Title;
            set => Source.Title = value;
        }
        
        public System.String? Composer
        {
            get => Source.Composer;
            set => Source.Composer = value;
        }
        
        public System.Int64 Millisconds
        {
            get => Source.Millisconds;
            set => Source.Millisconds = value;
        }
        
        public System.Int64 Bytes
        {
            get => Source.Bytes;
            set => Source.Bytes = value;
        }
        
        public System.Decimal UnitPrice
        {
            get => Source.UnitPrice;
            set => Source.UnitPrice = value;
        }
        
        public QTMusicStore.AppLogic.Models.App.Album? Album
        {
            get => Source.Album != null ? QTMusicStore.AppLogic.Models.App.Album.Create(Source.Album) : null;
            set => Source.Album = value?.Source;
        }
        
        public QTMusicStore.AppLogic.Models.App.Genre? Genre
        {
            get => Source.Genre != null ? QTMusicStore.AppLogic.Models.App.Genre.Create(Source.Genre) : null;
            set => Source.Genre = value?.Source;
        }
        ///
        /// Generated by the generator
        ///
        internal void CopyProperties(Entities.App.Track other)
        {
            bool handled = false;
            BeforeCopyProperties(other, ref handled);
            if (handled == false)
            {
                AlbumId = other.AlbumId;
                GenerId = other.GenreId;
                Title = other.Title;
                Composer = other.Composer;
                Millisconds = other.Millisconds;
                Bytes = other.Bytes;
                UnitPrice = other.UnitPrice;
                Album = other.Album != null ? QTMusicStore.AppLogic.Models.App.Album.Create((object)other.Album) : null;
                Genre = other.Genre != null ? QTMusicStore.AppLogic.Models.App.Genre.Create((object)other.Genre) : null;
                Id = other.Id;
            }
            AfterCopyProperties(other);
        }
        partial void BeforeCopyProperties(Entities.App.Track other, ref bool handled);
        partial void AfterCopyProperties(Entities.App.Track other);
        ///
        /// Generated by the generator
        ///
        public void CopyProperties(QTMusicStore.AppLogic.Models.App.Track other)
        {
            bool handled = false;
            BeforeCopyProperties(other, ref handled);
            if (handled == false)
            {
                AlbumId = other.AlbumId;
                GenerId = other.GenerId;
                Title = other.Title;
                Composer = other.Composer;
                Millisconds = other.Millisconds;
                Bytes = other.Bytes;
                UnitPrice = other.UnitPrice;
                Album = other.Album != null ? QTMusicStore.AppLogic.Models.App.Album.Create((object)other.Album) : null;
                Genre = other.Genre != null ? QTMusicStore.AppLogic.Models.App.Genre.Create((object)other.Genre) : null;
                Id = other.Id;
            }
            AfterCopyProperties(other);
        }
        partial void BeforeCopyProperties(QTMusicStore.AppLogic.Models.App.Track other, ref bool handled);
        partial void AfterCopyProperties(QTMusicStore.AppLogic.Models.App.Track other);
        ///
        /// Generated by the generator
        ///
        public override bool Equals(object? obj)
        {
            bool result = false;
            if (obj is Models.App.Track other)
            {
                result = Id == other.Id;
            }
            return result;
        }
        ///
        /// Generated by the generator
        ///
        public override int GetHashCode()
        {
            return HashCode.Combine(AlbumId, GenerId, Title, Composer, Millisconds, Bytes, HashCode.Combine(UnitPrice, Album, Genre, Id));
        }
        ///
        /// Generated by the generator
        ///
        public static QTMusicStore.AppLogic.Models.App.Track Create()
        {
            BeforeCreate();
            var result = new QTMusicStore.AppLogic.Models.App.Track();
            AfterCreate(result);
            return result;
        }
        ///
        /// Generated by the generator
        ///
        public static QTMusicStore.AppLogic.Models.App.Track Create(object other)
        {
            BeforeCreate(other);
            var result = new QTMusicStore.AppLogic.Models.App.Track();
            CommonBase.Extensions.ObjectExtensions.CopyFrom(result, other);
            AfterCreate(result, other);
            return result;
        }
        ///
        /// Generated by the generator
        ///
        public static QTMusicStore.AppLogic.Models.App.Track Create(QTMusicStore.AppLogic.Models.App.Track other)
        {
            BeforeCreate(other);
            var result = new QTMusicStore.AppLogic.Models.App.Track();
            result.CopyProperties(other);
            AfterCreate(result, other);
            return result;
        }
        ///
        /// Generated by the generator
        ///
        public static QTMusicStore.AppLogic.Models.App.Track Create(Entities.App.Track other)
        {
            BeforeCreate(other);
            var result = new QTMusicStore.AppLogic.Models.App.Track();
            result.Source = other;
            AfterCreate(result, other);
            return result;
        }
        static partial void BeforeCreate();
        static partial void AfterCreate(QTMusicStore.AppLogic.Models.App.Track instance);
        static partial void BeforeCreate(object other);
        static partial void AfterCreate(QTMusicStore.AppLogic.Models.App.Track instance, object other);
        static partial void BeforeCreate(QTMusicStore.AppLogic.Models.App.Track other);
        static partial void AfterCreate(QTMusicStore.AppLogic.Models.App.Track instance, QTMusicStore.AppLogic.Models.App.Track other);
        static partial void BeforeCreate(Entities.App.Track other);
        static partial void AfterCreate(QTMusicStore.AppLogic.Models.App.Track instance, Entities.App.Track other);
    }
}
